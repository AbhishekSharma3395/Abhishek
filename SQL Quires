/* Create Table */
Create Table First (
Id int,
FirstName varchar(255),
LastName varchar(255),
Address varchar(255),
City varchar(255),
Designation varchar(255),
Salary int
);

/* Insert Data Into Table */
INSERT INTO First (Id, FirstName,LastName, Address, City, Designation, Salary)
VALUES ('1', 'Abhishek', 'Sharma', 'Bedla', 'Udaipur', '.Net Developer','40000'),
('2', 'Abhinav', 'Sharma', 'Ahmdabad', 'Gujrat', 'Hotel Management','70000'),
('2', 'Abhinav', 'Sharma', 'Ahmdabad', 'Gujrat', 'Hotel Management','70000');

/* Copy Table */
select * into First1 from  First

/* Show Table Data */
select * from First1

/* Drop Table */
drop table First1

create table First1
(
Id int,
FirstName varchar(255),
LastName varchar(255),
Address varchar(255),
City varchar(255),
Designation varchar(255),
Salary int,
);

/* Alter Table Add Column */
alter table First1
Add Country varchar(255);

/* Insert Data From First1 */
INSERT INTO First1 (Id, FirstName,LastName, Address, City, Designation, Salary,Country)
VALUES ('1', 'Abhishek', 'Sharma', 'Bedla', 'Udaipur', '.Net Developer','40000','India'),
('2', 'Abhinav', 'Sharma', 'Ahmdabad', 'Gujrat', 'Hotel Management','70000','India'),
('3', 'Nikhil', 'Kumawat', 'Surjpol', 'Udaipur', 'Wordpress','20000','India');

/* DISTINCT Ignore Duplicate Value */
SELECT DISTINCT salary  
FROM First1
WHERE salary > 15000;  

/*Unioun
Ignore Duplicate Value*/ 
SELECT City FROM First
UNION 
SELECT City FROM First1
ORDER BY City;

/* For Duplicate Value Union All */
SELECT City FROM First
UNION All
SELECT City FROM First1
ORDER BY City;

/* Unique  */
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
);
/*To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:*/
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
);

ALTER TABLE First1
ADD CONSTRAINT PK_First1  PRIMARY KEY (Id,LastName);


/*Piot Row To Coloumn  */
CREATE TABLE demo_table(
NAME varchar(30),
COLLEGE varchar(30),
EXAM_DATE DATE,
SUBJECTS varchar(30),
MARKS int);

INSERT INTO demo_table VALUES ('ROMY', 'BVCOE', 
'12-OCT-2021', 'DBMS', 90),
('ROMY', 'BVCOE', '12-OCT-2021', 'NETWORKING', 50),
('ROMY', 'BVCOE', '12-OCT-2021', 'GRAPHICS', 60),
('ROMY', 'BVCOE', '12-OCT-2021', 'CHEMISTRY', 78),
('ROMY', 'BVCOE', '12-OCT-2021', 'MATHEMATICS', 88),
('PUSHKAR', 'MSIT', '14-OCT-2021', 'NETWORKING' , 47),
('PUSHKAR', 'MSIT', '14-OCT-2021', 'GRAPHICS', 55),
('PUSHKAR', 'MSIT', '14-OCT-2021', 'CHEMISTRY', 89),
('PUSHKAR', 'MSIT', '14-OCT-2021', 'MATHEMATICS', 25),
('PUSHKAR', 'MSIT', '14-OCT-2021', 'DBMS', 75);

select * from demo_table

SELECT * FROM demo_table  
 PIVOT
(AVG(MARKS) FOR SUBJECTS IN (DBMS,NETWORKING, 
GRAPHICS, CHEMISTRY, MATHEMATICS)) AS PivotTable;



/* Having  */
SELECT COUNT(MARKS), SUBJECTS
FROM demo_table
GROUP BY SUBJECTS
HAVING COUNT(MARKS) > 50;



/* And All Conditions Must Be True  */
SELECT * FROM First1
WHERE Country = 'India' AND FirstName LIKE 'A%';

SELECT * FROM First1
WHERE Country = 'India'
AND City = 'Udaipur'
AND Salary > '40000';

SELECT * FROM First1
WHERE Country = 'India'
AND (FirstName LIKE 'N%' OR FirstName LIKE 'D%');


/* OR  */
SELECT * FROM First1
WHERE City = 'Uadaipur'
OR FirstName LIKE 'D%'
OR Country = 'India'; 


/* Exists */
SELECT FirstName
FROM First
WHERE EXISTS (SELECT FirstName FROM First1 WHERE First.Id = First1.Id  AND Salary < 20000);

/*All */
SELECT All FirstName
FROM First
WHERE Salary>20000;

/*Any*/
SELECT FirstName
FROM First
WHERE Id = Any (SELECT Id FROM First1 WHERE  Salary < 20000);

/*Not*/
Select FirstName from First1
WHERE NOT Country = 'India';

SELECT * FROM First1
WHERE NOT Salary < 20000;

/*Not Between*/
SELECT * FROM First1
WHERE Id NOT BETWEEN 3 AND 5;

/*Avg */
SELECT AVG(Salary)
FROM First1;


/* Error */
ALTER TABLE First1
ADD PRIMARY KEY (Id);

select LEN (FirstName) as FirstName from First1

/* Update */
update First1 set country = 'China' where id = 4

/* Upper */
Select UPPER (FirstName) from First1
/* SUBSTRING */
select SUBSTRING (FirstName,2,4) FirstName from First1 
/* CONCAT */
select CONCAT (FirstName,Country),FirstName From First1
/* Replace */
select Replace (FirstName,'Dev','Mohan')Firstname,LastName from First1
/* Null If */
SELECT NULLIF(25, 25) AS Result;  


/* Group By */
Select City, sum(Salary) as total
from First1
Group By City
Order by city ASC

/* Having */
Select City, sum(Salary) as total
from First1
Group By City
having count(salary) > = 20000 and (salary) < 40000
Order by total DESC

SELECT SUM(Salary), City FROM First1 GROUP BY City HAVING SUM(salary)>5000;  

/*Count */
SELECT COUNT(*) 
FROM First1 
WHERE salary = '20000';


/*Exist */
SELECT *  FROM First
WHERE EXISTS (SELECT * FROM First1 WHERE First1.Salary = First.Salary ) 
         

/* Case */
SELECT Id, FirstName,  
CASE FirstName  
    WHEN 'Aditya' THEN 'SQL is developed by IBM'  
    WHEN 'Aakansha' THEN 'Java Java was created at Sun Microsystems Inc.'  
    WHEN 'Nikhil' THEN 'MS-SQL is developed by Microsoft Corporation.' 
	WHEN 'Devanshu' THEN 'MS-SQL is developed by Microsoft Corporation.' 
    WHEN 'Mohit' THEN 'MS-SQL is developed by Microsoft Corporation.'  
	WHEN 'Dev' THEN 'MS-SQL is developed by Microsoft Corporation.' 
    ELSE 'Do not Know.'  
END AS Description  
FROM First1; 


SELECT Id, FirstName,Salary  
 FROM First1  
 ORDER BY CASE  
WHEN Salary>25000 THEN salary End DESC,  
CASE WHEN Salary<20000 THEN salary    
END  


SELECT Id, FirstName, Age,  
CASE  
 WHEN Age>22 THEN 'Mature'  
 WHEN Age>=17 AND age<22 THEN 'Immature'  
 ELSE 'Child'  
END AS Maturity FROM First;  


/* Primary Key */
CREATE TABLE Customer(
    Id int primary key not null identity(1,1),
    Customer_name varchar(20),
    Customer_Address varchar(20),
)

/* Foriegn Key */
CREATE TABLE SALES( 
    id int,
    Item_id int,
    Payment_Mode varchar(20),
    Customer_id int
    CONSTRAINT FK_Sales FOREIGN KEY 
    (Customer_id)REFERENCES Customer(id)
)
/* Both Key Join */
SELECT Customer.Id, Customer.Customer_name,Customer_Address,SALES.Item_id
FROM Customer
INNER JOIN Sales
ON Customer.Id=SALES.Customer_id
order by Id; 


/* While LOOP */
DECLARE @i INTEGER;
SET @i = 1;
 
WHILE @i <= 10
BEGIN
   PRINT CONCAT('Pass...', @i);
   SET @i = @i + 1;
END;

/* While LOOP Continue */
DECLARE @j INTEGER;
SET @j = 1;
 
WHILE @j <= 10
BEGIN
   PRINT CONCAT('Pass...', @j);
   IF @j = 9 CONTINUE;
   SET @j = @j + 1;
END;


/*Identity */
CREATE TABLE person (  
    Fullname VARCHAR(100) NOT NULL,  
    Occupation VARCHAR(50),  
    Gender VARCHAR(10) NOT NULL  
);   
ALTER TABLE person    
ADD PersonID INT IDENTITY(10,1) PRIMARY KEY NOT NULL;

SELECT MAX(PersonID) AS maxidentity FROM person;  
  
INSERT INTO person(Fullname, Occupation, Gender)  
VALUES('Brian Lara', 'Cricket', 'Male');  
 

 /* MERGE Table1 */
CREATE TABLE Products(  
    ID INT,  
    Product_Name VARCHAR(65),  
    Price DECIMAL(9,2)  
)  
      
INSERT INTO Products(ID, Product_Name, Price) VALUES   
(1, 'Table', 150), (2, 'Desk', 100),  
(3, 'Chair', 75), (4, 'Computer', 225); 

 /* MERGE Table 2 */
CREATE TABLE TargetProducts(  
    ID INT,  
    Product_Name VARCHAR(65),  
    Price DECIMAL(9,2)  
)  
      
INSERT INTO TargetProducts(ID, Product_Name, Price) VALUES  
(1, 'Table', 150),  
(2, 'Desk', 150),  
(5, 'Bed', 100),  
(6, 'Cupboard', 350);  

SELECT * FROM Products  
SELECT * FROM TargetProducts

/* MERGE Both Table Quiery */
MERGE TargetProducts AS Target  
USING Products  AS Source  
ON Source.ID = Target.ID  
WHEN NOT MATCHED BY Target THEN  
    INSERT (ID, Product_Name, Price)   
    VALUES (Source.ID, Source.Product_Name, Source.Price);  



/* Join  */
SELECT First.Id, First.FirstName, First1.LastName
FROM First
INNER JOIN First1
ON First.Id=First1.Id;

/* Left Join  */
SELECT First.Id, First.FirstName, First1.LastName
FROM First
LEft JOIN First1
ON First.Id=First1.Id;

/*  Right Join  */
SELECT First.Id, First.FirstName, First1.LastName
FROM First
Right JOIN First1
ON First.Id=First1.Id;

/* Full Join  */
SELECT First.Id, First.FirstName, First1.LastName
FROM First
Full JOIN First1
ON First.Id=First1.Id;

/* Self Join  */
Select T1.FirstName As FirstName, T2.LastName As Lastname
From First1 as T1
Join First1 As T2
on T1.City=T2.Address

/* Cross Join  */
SELECT *    
FROM First  
CROSS JOIN First1; 

/* Cross Join 2nd Example */
SELECT First.FirstName, First.LastName, First.Address,   
First1.Salary, First1.Country    
FROM First    
CROSS JOIN First1;  





/* Store Procedure */
SELECT 
	FirstName, 
	LastName,
	Salary,
	Designation
FROM 
	First1
ORDER BY 
	FirstName;

/* Create Procedure */
CREATE PROCEDURE First1Procedure
AS
BEGIN
  SELECT 
	FirstName, 
	LastName,
	Salary,
	Designation,
	Country

FROM 
	First1
ORDER BY 
	FirstName;
END;

/* ALTER Procedure */
ALTER PROCEDURE [dbo].[First1Procedure]
AS
BEGIN
  SELECT 
	FirstName, 
	LastName,
	Salary,
	Designation,
	Country
FROM 
	First1
ORDER BY 
	FirstName;
END;



/* Execute Procedure */
EXECUTE First1Procedure ;

/*Deleting a stored procedure */
DROP PROCEDURE sp_name;


/* ALTER Procedure Condition Salary */
ALTER PROCEDURE [dbo].[First1Procedure](@min_Salary AS DECIMAL)
AS
BEGIN
  SELECT 
	FirstName,
	Salary
FROM 
	First1
	where
	   salary >= @min_Salary
ORDER BY 
	FirstName;
END;

/* show salary >20000 */
EXEC First1Procedure 20000;


/* ALTER Procedure Condition Salary Between*/
ALTER PROCEDURE First1Procedure(
    @min_Salary AS DECIMAL,
    @max_Salary AS DECIMAL
)
AS
BEGIN
    SELECT
       FirstName,
	   Salary
    FROM 
       First1
    WHERE
        Salary >= @min_Salary AND
        Salary <= @max_Salary
    ORDER BY
       Salary;
END;

EXECUTE First1Procedure 10000, 20000;

EXECUTE First1Procedure 
    @min_Salary = 10000, 
    @max_Salary = 50000;



/* Creating Text Parameter */
ALTER PROCEDURE First1Procedure(
      @min_Salary AS DECIMAL
    ,@max_Salary AS DECIMAL
    ,@name AS VARCHAR(max)
)
AS
BEGIN
    SELECT
           FirstName,
	        Salary
    FROM 
        First1
    WHERE
        Salary >=  @min_Salary  AND
        Salary <= @max_Salary AND
        FirstName LIKE '%' + @name + '%'
    ORDER BY
        Salary;
END;


EXECUTE First1Procedure 
    @min_Salary = 10000, 
    @max_Salary = 20000,
    @name = 'Nikhil';

/* Creating Optional Parameters */
ALTER PROCEDURE First1Procedure(
        @min_Salary AS DECIMAL = 0
    ,  @max_Salary AS DECIMAL = 999999
    ,@name AS VARCHAR(max)
)
AS
BEGIN
    SELECT
           FirstName,
	        Salary
    FROM 
        First1
    WHERE
        Salary >=  @min_Salary  AND
        Salary <= @max_Salary AND
        FirstName LIKE '%' + @name + '%'
    ORDER BY
        Salary;
END;


EXECUTE First1Procedure 
    @name = 'A';

EXECUTE First1Procedure 
    @min_Salary = 20000,
    @name = 'A';

Drop procedure First1Procedure 



/* Declaring a variable */

DECLARE
		@Country varchar(50);

SET @Country = 'India';

/* Create Procedure To Find Particular Value */

CREATE PROCEDURE First1Procedure
@Country Nvarchar(100)
AS
BEGIN
Select * from First1 where Country=@Country
end

exec First1Procedure @Country= 'India'

/*  View  */
CREATE VIEW First1View
as
SELECT First.Id, First.FirstName, First1.LastName
FROM First
INNER JOIN First1
ON First.Id=First1.Id;

select * from First1View

DROP VIEW First1View


/*  Triggers  */
/* Create Trigger */
create trigger tr_first_forinsert
on First1 
after insert
as
begin
print 'Something Happend To The First1 Table'
end

select * from First1
INSERT INTO First1 (Id, FirstName,LastName, Address, City, Designation, Salary,Country)
VALUES ('8', 'Komal', 'Sharma', 'Sec11', 'Udaipur', 'Manager','30000','Australiya');

/* OP => Something Happend To The First1 Table */


/* Alter Trigger */
Alter trigger tr_first_forinsert
on First1 
after insert
as
begin
         select * from Inserted
end

INSERT INTO First1 (Id, FirstName,LastName, Address, City, Designation, Salary,Country)
VALUES ('9', 'Jaya', 'Sonava', 'Pratapnagar', 'Udaipur', 'Head','50000','Ploand'),
('10', 'Aardhya', 'Solanki', 'Badgav', 'Udaipur', 'Peon','5000','NewYork'),
('11', 'Chris', 'Ronaldo', 'Arena', 'US', 'Football','50000','Brazil');
/* Inserted Row Show */


/* For Delete Trigger */

Create trigger tr_first_forDelete
on First1 
after Delete
as
begin
         select * from deleted
end

delete from First1 where id =9

/* Deleted Row Show */

/* For Information  Insert Data */
create table first1_Details
(Details_ID Int primary key identity, Details_Info varchar(max));

select * from first1_Details
/* Get Data Through ID */
Create trigger tr_Details_forinsert
on First1 
after insert
as
begin
         declare @id int
		 select @id= id from inserted
		 insert into first1_Details 
		 values('Name With Id ' + Cast(@id as varchar (50)) + ' is added at '+ Cast(GETDATE()as varchar))
end

INSERT INTO First1 (Id, FirstName,LastName, Address, City, Designation, Salary,Country)
VALUES ('9', 'Jaya', 'Sonava', 'Pratapnagar', 'Udaipur', 'Head','50000','Ploand');


/* Get Data Through Name */
Create trigger tr_Details_forinsertN
on First1 
after insert
as
begin
         declare @name varchar(50)
		 select @name= FirstName from inserted
		 insert into first1_Details 
		 values('Name Add ' + Cast(@name as varchar (50)) + ' is added at '+ Cast(GETDATE()as varchar))
end

/* For Information Delete Data */
Create trigger tr_Details_forDelete
on First1 
after delete
as
begin
         declare @name varchar(50)
		 select @name= FirstName from deleted
		 insert into first1_Details 
		 values('Existing Name With' + Cast(@name as varchar (50)) + ' is Deleted at '+ Cast(GETDATE()as varchar))
end
delete from First1 where id=9


/* Update Trigger */

create trigger tr_first_forUpdate
on First1 
after Update
as
begin
select * from inserted;
select * from deleted;
end

update First1 set FirstName='Kaushal' ,city = 'Nathdwara' where id=9

/* Triger Ki Query Dekhne Ke Liye */
sp_helptext tr_first_forUpdate
sp_helptext tr_first_forDelete


/* Instead OF Triggers */
/* 1st => Instead OF Insert Triggers*/

create Trigger tr_first_InsteadOf_Insert
on First1
Instead Of Insert
as
begin
print 'You Are Not Allowed To Data In This Table!!'
end

INSERT INTO First1 (Id, FirstName,LastName, Address, City, Designation, Salary,Country)
VALUES ('10', 'Jaya', 'Sonava', 'Pratapnagar', 'Udaipur', 'Head','50000','Ploand');
/* Not Insert*/


/* 2nd => Instead OF Update Triggers*/

create Trigger tr_first_InsteadOf_Update
on First1
Instead Of Update
as
begin
print 'You Are Not Allowed To Update Data In This Table!!'
end

update First1 set FirstName ='Jaya' where id=9
/*not update*/

/* 3rd => Instead OF Delete Triggers*/
create Trigger tr_first_InsteadOf_Delete
on First1
Instead Of Delete
as
begin
print 'You Are Not Allowed To Delete Data In This Table!!'
end


delete from First1 where id=5
/*not delete*/


select * from First
select * from First1
select * from first1_Details






/* Secure Trigger */ 

select * from first1_Details

alter Trigger tr_first_InsteadOf_Delete
on First1
with encryption
Instead Of Delete
as
begin
insert into First1_Details values('Someone Try TO Delete Data From First1_Details')
end

sp_helptext tr_first_InsteadOf_Delete
/* Encripted */ 

/* Remove Encripted */
alter Trigger tr_first_InsteadOf_Delete
on First1
Instead Of Delete
as
begin
insert into First1_Details values('Someone Try TO Delete Data From First1_Details')
end
sp_helptext tr_first_InsteadOf_Delete
/* Decripted */


/* Using Instead Of Triggers with Views */
select * from Employee_Person_Details
select * from Employee_Salary_Details

create view Vw_Employess
as
select A.EmpId,A.FirstName,A.LastName,
b.Designation, B.Salary
from Employee_Person_Details as A
inner join Employee_Salary_Details as B
on A.EmpID=B.EmpId

select * from Vw_Employess

delete from Vw_Employess where EmpId= 4
/* not delete */

/* view Single Table */
create view Vw_Employess1
as
select * from Employee_Person_Details

select * from Vw_Employess1

delete from Vw_Employess1 where EmpId= 4
/* delete Succesfull */


/* Delete Instead Of Triger */
select * from Vw_Employess

delete from Vw_Employess where EmpId= 4
/* 3 row delete hogi vw or dono table */

create trigger tr_InsteadOf_EmployeeDetails
on Vw_Employess
instead of delete
as
Begin
    delete from Employee_Person_Details where EmpId in (select Empid from deleted)
	delete from Employee_Salary_Details where EmpId in (select Empid from deleted)
end


/* DDL Triger */
create trigger tr_ddl_table_create
on database 
for Create_Table
as
begin 
     print 'New Table Created';
end

create table test_tbl(id int);

/*Alter*/
Create trigger tr_ddl_table_Alter
on database 
for Alter_Table
as
begin 
     print 'You Have Just Alter A Table';
end

Alter table test_tbl add name varchar(50);

/*Drop*/

Create trigger tr_ddl_table_Drop
on database 
for Drop_Table
as
begin 
     print 'You Have Just Dropeed A Table';
end

drop table test_tbl;


/*All 3 Action Perform*/
Create trigger tr_ddl_table
on database 
for Create_Table,Alter_Table,Drop_Table
as
begin 
     print 'You Have Just Create Alter Or Dropeed A Table' ;
end

create table test_tbl(id int);
Alter table test_tbl add name varchar(50);
drop table test_tbl;


/*For Strore Procedure*/

Create trigger tr_ddl_SP_Create
on database 
with encryption
for Create_Procedure
as
begin 
     rollback
     print 'You Are Not Allowed To Create A Store Procedure' ;
end

create procedure sp_Myprocedure
as
begin
print 'This is my Store Procedure'
end

/*Restriction for create table*/

create trigger tr_ddl_table_create
on database 
for Create_Table
as
begin 
rollback
     print 'You Cannot Create A Table In This Database';
end

create table Test_Table(id int);

drop table Test_Table






























/* Join 
(INNER) JOIN: Returns records that have matching values in both tables.
LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table
Self Join = > is a regulare join which a table is joined to itself,comparing values in a colum of rows with the same table.
Cross Join => Multiply by other table
*/


/*The UNION operator selects only distinct values by default. 
 To allow duplicate values, use UNION ALL:

OR => The OR operator displays a record if any of the conditions are TRUE.
AND => The AND operator displays a record if all the conditions are TRUE.

where=> select ke sath
Group By => same value ko group 
Having => group by ke sath,baad me
Order By = > he ORDER BY keyword is used to sort the result-set in ascending or descending order.
Exist => COmmon value Find Kr K dega 2 tables me
Foreign Key = > 2 table ko merge,
DISTINCT => clause is used to remove duplicates from the table

View => Does Not Store Data, Only Store Structure of this view. Advanatage Security,Cimpiffy Complex Sql Quiry.

Trigger => sp he khud execute hota he jab koi event chalta he.
3 Type=>
1)DML=>insert update delete(automatically fired)
  
  2 Types DML Triger=>
  a) After Trigers(also called for triggeers)
  b) Instead for Trigers=> Types-> Instead of insert,update,delete triger

2)DDL=> create alter

3)LOGON


/* Using Instead Of Triggers with Views => many operation perfrom of views.
view me se delete to table me bhi delete. 
view me delete nhi hoga agar 2 table me se join kr k view banaya
ek table se banaya to delete ho jayga.

DDL Trigers=> Create ALter Drop
modification krne se bacha skte.
notification de skte ki ne kya kiya
Programability ke under Database Triger ke undr show honge
*/


*/
